#include <iostream>
using namespace std;
template <typename T>
class SimpleVector
{
private:
  T* arr;
  size_t size;
  size_t capacity;

public:
  SimpleVector() : arr(nullptr), size(0), capacity(0) {}

  explicit SimpleVector(size_t n) : arr(new T[n]), size(n), capacity(n)
  {
    for (size_t i = 0; i < size; ++i)
    {
      arr[i] = T();
    }
  }

  ~SimpleVector()
  {
    delete[] arr;
  }

  T& operator[](size_t index)
  {
    return arr[index];
  }

  void push_back(const T& value)
  {
    if (size >= capacity)
    {
      capacity = capacity == 0 ? 1 : capacity * 2;
      T* new_arr = new T[capacity];
      for (size_t i = 0; i < size; ++i)
      {
        new_arr[i] = arr[i];
      }
      delete[] arr;
      arr = new_arr;
    }
    arr[size++] = value;
  }
};

int main()
{
  SimpleVector<int> vec;
  vec.push_back(1);
  vec.push_back(2);
  vec.push_back(3);

  cout << vec[0] << " " << vec[1] << " " << vec[2] << "\n";

  return 0;
}
